{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","serviceWorker.js","index.js","components/Chart/Chart.module.css","App.module.css","images/coronavirus.png"],"names":["module","exports","Cards","props","data","cases","deaths","recovered","updated","todayCases","todayDeaths","tests","active","console","log","updatedDate","Date","toTimeString","slice","className","styles","container","updateHeading","heading1","heading2","Grid","spacing","justify","item","gridItem","xs","md","Typography","cx","heading","confirmedheading","component","todaysCount","confirmedTodaysCount","start","end","duration","separator","totalCount","confirmedTotalCount","style","fontSize","fontWeight","activeheading","activeTodaysCount","activeTotalCount","recoveredheading","recoveredTodaysCount","recoveredTotalCount","testheading","testTodaysCount","testTotalCount","deathsheading","deathsTodaysCount","deathsTotalCount","url_1","url_2","fetchData","country","a","changeableUrl","axios","get","fetchDailyData","modifiedData","map","dailyData","confirmed","total","date","reportDate","fetchCountries","countries","name","fetchCountriesData","response","res","timeline","Chart","data1","countryName","dates","useState","setDailyData","useEffect","fetchApi","globalLineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","countryLineChart","graph","bar","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCounries","setFetchedCountries","fetch","Paper","elevation","FormControl","NativeSelect","defaultValue","onChange","e","target","value","autoFocus","id","option","index","key","App","state","countryDates","activeCase","recoveredCases","fetchedData","setState","countryData","Object","keys","values","this","src","coronaImage","image","alt","links","href","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3a7c157a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2bEGM\",\"updateHeading\":\"Cards_updateHeading__bhbzB\",\"heading1\":\"Cards_heading1__3aoma\",\"heading2\":\"Cards_heading2__2dDxA\",\"gridItem\":\"Cards_gridItem__1yJhX\",\"heading\":\"Cards_heading__2mCSm\",\"todaysCount\":\"Cards_todaysCount__2oETt\",\"totalCount\":\"Cards_totalCount__2HzDf\",\"confirmedheading\":\"Cards_confirmedheading__Rv-QW\",\"activeheading\":\"Cards_activeheading__1_QMM\",\"recoveredheading\":\"Cards_recoveredheading__32bm7\",\"testheading\":\"Cards_testheading__yXWJ6\",\"deathsheading\":\"Cards_deathsheading__1rpyV\",\"confirmedTodaysCount\":\"Cards_confirmedTodaysCount__4S9hb\",\"testTodaysCount\":\"Cards_testTodaysCount__1Wi2L\",\"recoveredTodaysCount\":\"Cards_recoveredTodaysCount__1xYSg\",\"deathsTodaysCount\":\"Cards_deathsTodaysCount__IyZmd\",\"confirmedTotalCount\":\"Cards_confirmedTotalCount__3WYPn\",\"activeTotalCount\":\"Cards_activeTotalCount__7K6Lt\",\"recoveredTotalCount\":\"Cards_recoveredTotalCount__dNkbt\",\"testTotalCount\":\"Cards_testTotalCount__3paEZ\",\"deathsTotalCount\":\"Cards_deathsTotalCount__3qnpY\"};","import React from \"react\";\r\nimport styles from \"./Cards.module.css\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nconst Cards = (props) => {\r\n  const {\r\n    data: {\r\n      cases,\r\n      deaths,\r\n      recovered,\r\n      updated,\r\n      todayCases,\r\n      todayDeaths,\r\n      tests,\r\n      active,\r\n    },\r\n  } = props;\r\n  console.log(tests);\r\n  let updatedDate = new Date(updated).toTimeString();\r\n  updatedDate = updatedDate.slice(0, 8);\r\n  // const updatedDate = (timestamp) => {\r\n  //   var date = new Date(timestamp * 1000);\r\n\r\n  //   var year = date.getUTCFullYear();\r\n  //   var month = date.getUTCMonth() + 1; // getMonth() is zero-indexed, so we'll increment to get the correct month number\r\n  //   var day = date.getUTCDate();\r\n  //   var hours = date.getUTCHours();\r\n  //   var minutes = date.getUTCMinutes();\r\n  //   var seconds = date.getUTCSeconds();\r\n\r\n  //   month = month < 10 ? \"0\" + month : month;\r\n  //   day = day < 10 ? \"0\" + day : day;\r\n  //   hours = hours < 10 ? \"0\" + hours : hours;\r\n  //   minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n  //   seconds = seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n  //   return year + \"-\" + month + \"-\" + day + \" \" + hours + \":\" + minutes;\r\n  // };\r\n\r\n  // const lastUpdate = updatedDate(updated);\r\n  console.log(updatedDate);\r\n  if (!cases) {\r\n    return \"Loading...\";\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.updateHeading}>\r\n        <p className={styles.heading1}>LAST UPDATED</p>\r\n        <p className={styles.heading2}>{updatedDate} IST</p>\r\n      </div>\r\n      <Grid container spacing={2} justify=\"center\">\r\n        {/* <Grid\r\n          item\r\n          component={Card}\r\n          xs={4}\r\n          md={3}\r\n          className={cx(styles.card, styles.infected)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              INFECTED\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp start={0} end={cases} duration={2} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">{updatedDate}</Typography>\r\n            <Typography variant=\"body2\">\r\n              NUMBER OF CONFIRMED CASES FROM COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={4}\r\n          md={3}\r\n          className={cx(styles.card, styles.recovered)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              RECOVERED\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp start={0} end={recovered} duration={2} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">{updatedDate}</Typography>\r\n            <Typography variant=\"body2\">\r\n              NUMBER OF RECOVERIES FROM COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={4}\r\n          md={3}\r\n          className={cx(styles.card, styles.deaths)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              DEATH\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp start={0} end={deaths} duration={2} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">{updatedDate}</Typography>\r\n            <Typography variant=\"body2\">\r\n              NUMBER OF DEATHS CAUSED BY COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid> */}\r\n        {/* <Grid\r\n          item\r\n          component={Card}\r\n          xs={4}\r\n          md={3}\r\n          className={cx(styles.NewCard)}\r\n        >\r\n          <CardContent>\r\n            <Typography>DECEASED</Typography>\r\n            <Typography>[+13]</Typography>\r\n            <Typography>544</Typography>\r\n          </CardContent>\r\n        </Grid> */}\r\n        <Grid item className={styles.gridItem} xs={4} md={3}>\r\n          <Typography\r\n            className={cx(styles.heading, styles.confirmedheading)}\r\n            component={\"span\"}\r\n          >\r\n            CONFIRMED\r\n          </Typography>\r\n          <Typography\r\n            className={cx(styles.todaysCount, styles.confirmedTodaysCount)}\r\n          >\r\n            [+\r\n            <CountUp start={0} end={todayCases} duration={2} separator=\",\" />]\r\n          </Typography>\r\n          <Typography\r\n            className={cx(styles.totalCount, styles.confirmedTotalCount)}\r\n          >\r\n            <span style={{ fontSize: \"22px\", fontWeight: \"bold\" }}>\r\n              <CountUp start={0} end={cases} duration={2} separator=\",\" />\r\n            </span>\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item className={styles.gridItem} xs={4} md={3}>\r\n          <Typography className={cx(styles.heading, styles.activeheading)}>\r\n            ACTIVE\r\n          </Typography>\r\n          <Typography\r\n            className={cx(styles.todaysCount, styles.activeTodaysCount)}\r\n          ></Typography>\r\n          <Typography\r\n            className={cx(styles.totalCount, styles.activeTotalCount)}\r\n          >\r\n            <span style={{ fontSize: \"22px\", fontWeight: \"bold\" }}>\r\n              <CountUp start={0} end={active} duration={2} separator=\",\" />\r\n            </span>\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item className={styles.gridItem} xs={4} md={3}>\r\n          <Typography className={cx(styles.heading, styles.recoveredheading)}>\r\n            RECOVERED\r\n          </Typography>\r\n          <Typography\r\n            className={cx(styles.todaysCount, styles.recoveredTodaysCount)}\r\n          ></Typography>\r\n          <Typography\r\n            className={cx(styles.totalCount, styles.recoveredTotalCount)}\r\n          >\r\n            <span style={{ fontSize: \"22px\", fontWeight: \"bold\" }}>\r\n              <CountUp start={0} end={recovered} duration={2} separator=\",\" />\r\n            </span>\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item className={styles.gridItem} xs={4} md={3}>\r\n          <Typography className={cx(styles.heading, styles.testheading)}>\r\n            TEST\r\n          </Typography>\r\n          <Typography\r\n            className={cx(styles.todaysCount, styles.testTodaysCount)}\r\n          ></Typography>\r\n          <Typography className={cx(styles.totalCount, styles.testTotalCount)}>\r\n            <span style={{ fontSize: \"22px\", fontWeight: \"bold\" }}>\r\n              <CountUp start={0} end={tests} duration={2} separator=\",\" />\r\n            </span>\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item className={styles.gridItem} xs={4} md={3}>\r\n          <Typography className={cx(styles.heading, styles.deathsheading)}>\r\n            DECEASED\r\n          </Typography>\r\n          <Typography\r\n            className={cx(styles.todaysCount, styles.deathsTodaysCount)}\r\n          >\r\n            [+\r\n            <CountUp start={0} end={todayDeaths} duration={2} separator=\",\" />]\r\n          </Typography>\r\n          <Typography\r\n            className={cx(styles.totalCount, styles.deathsTotalCount)}\r\n          >\r\n            <span style={{ fontSize: \"22px\", fontWeight: \"bold\" }}>\r\n              <CountUp start={0} end={deaths} duration={2} separator=\",\" />\r\n            </span>\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url_1 = \"https://corona.lmao.ninja\";\r\nconst url_2 = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url_1;\r\n  if (country) {\r\n    changeableUrl = `${url_1}/countries/${country}`;\r\n  } else {\r\n    changeableUrl = `${url_1}/all`;\r\n  }\r\n\r\n  try {\r\n    const {\r\n      data: {\r\n        cases,\r\n        todayCases,\r\n        deaths,\r\n        todayDeaths,\r\n        recovered,\r\n        updated,\r\n        tests,\r\n        active,\r\n      },\r\n    } = await axios.get(changeableUrl);\r\n    return {\r\n      cases,\r\n      todayCases,\r\n      deaths,\r\n      todayDeaths,\r\n      recovered,\r\n      updated,\r\n      tests,\r\n      active,\r\n    };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url_2}/daily`);\r\n\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url_2}/countries`);\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountriesData = async (country) => {\r\n  let changeableUrl = url_1;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url_1}/v2/historical/${country}`;\r\n  } else {\r\n    changeableUrl = `${url_1}/v2/historical/`;\r\n  }\r\n\r\n  try {\r\n    const response = await axios.get(changeableUrl);\r\n\r\n    const res = response.data.timeline;\r\n    return res;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./Chart.module.css\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport { fetchDailyData } from \"../../api\";\r\n\r\nconst Chart = (props) => {\r\n  const { data1, countryName, dates, cases, deaths, recovered } = props;\r\n\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n\r\n    fetchApi();\r\n  }, []);\r\n\r\n  let globalLineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255,0,0,0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  let countryLineChart = cases ? (\r\n    <Line\r\n      data={{\r\n        labels: dates,\r\n        datasets: [\r\n          {\r\n            data: cases,\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            backgroundColor: \"rgba(0,0,255,0.2)\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: recovered,\r\n            label: \"Recovered\",\r\n            borderColor: \"#3aff33\",\r\n            backgroundColor: \"rgba(0,255,0, 0.2)\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: deaths,\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255,0,0,0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  let barGraph = data1.cases ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255,0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255,0,0, 0.5)\",\r\n            ],\r\n            data: [data1.cases, data1.recovered, data1.deaths],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${countryName}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  let graph = globalLineChart;\r\n  const bar = barGraph;\r\n\r\n  if (countryName) {\r\n    graph = countryLineChart;\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.graph}>{graph}</div>\r\n\r\n      <div className={styles.bar}>{bar}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  NativeSelect,\r\n  FormControl,\r\n  Paper,\r\n  InputLabel,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport styles from \"./CountryPicker.module.css\";\r\n\r\nimport { fetchCountries } from \"../../api\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [fetchedCounries, setFetchedCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    };\r\n\r\n    fetch();\r\n  }, [setFetchedCountries]);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Paper elevation={3}>\r\n        <FormControl>\r\n          <NativeSelect\r\n            defaultValue=\"\"\r\n            onChange={(e) => handleCountryChange(e.target.value)}\r\n            autoFocus\r\n            id=\"native-select\"\r\n            styles={styles.option}\r\n          >\r\n            <option value=\"\">Global</option>\r\n            <option value=\"Usa\">USA</option>\r\n            <option value=\"India\">India</option>\r\n            {fetchedCounries.map((country, index) => (\r\n              <option key={index} value={country}>\r\n                {country}\r\n              </option>\r\n            ))}\r\n          </NativeSelect>\r\n        </FormControl>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React from \"react\";\n\nimport { Cards, Chart, CountryPicker } from \"./components\";\nimport styles from \"./App.module.css\";\nimport { fetchData, fetchCountriesData } from \"./api\";\n\nimport coronaImage from \"./images/coronavirus.png\";\nimport { Paper, Typography } from \"@material-ui/core\";\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: \"\",\n    countryDates: [],\n    activeCase: [],\n    deaths: [],\n    recoveredCases: [],\n  };\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    await this.setState({ data: fetchedData, country: country });\n\n    const countryData = await fetchCountriesData(country);\n\n    const dates = Object.keys(countryData.cases);\n    const cases = Object.values(countryData.cases);\n    const deaths = Object.values(countryData.deaths);\n    const recovered = Object.values(countryData.recovered);\n\n    this.setState({\n      activeCase: cases,\n      deaths: deaths,\n      recoveredCases: recovered,\n      countryDates: dates,\n    });\n  };\n\n  render() {\n    return (\n      <div className={styles.container}>\n        <img src={coronaImage} className={styles.image} alt=\"COVID-19\" />\n        {console.log(this.state.data)}\n        <Cards data={this.state.data} />\n        <CountryPicker\n          handleCountryChange={this.handleCountryChange}\n          data={this.state.data}\n          country={this.state.country}\n        />\n        <Chart\n          data1={this.state.data}\n          countryName={this.state.country}\n          dates={this.state.countryDates}\n          cases={this.state.activeCase}\n          deaths={this.state.deaths}\n          recovered={this.state.recoveredCases}\n        />\n        <Paper elevation={3}>\n          <Typography className={styles.links}>\n            Api Details:{\" \"}\n            <a\n              href=\"https://documenter.getpostman.com/view/8854915/SzS7R6uu?version=latest\"\n              target=\"_blank\"\n            >\n              Api 1,\n            </a>\n            <a href=\" https://covid19.mathdro.id/api\" target=\"_blank\">\n              Api 2\n            </a>\n          </Typography>\n        </Paper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1x45o\",\"bar\":\"Chart_bar__nrpQS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2UDSr\",\"image\":\"App_image__1Bz_5\",\"links\":\"App_links__22_ba\"};","module.exports = __webpack_public_path__ + \"static/media/coronavirus.34967c3b.png\";"],"sourceRoot":""}