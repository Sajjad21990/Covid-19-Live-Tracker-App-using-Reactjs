{"version":3,"sources":["constants/CardConstant.js","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","Layout/Layout1.js","components/IndiaTracker/IndiaTrackerCards/IndiaTrackerCards.js","components/IndiaTracker/IndiaTracker.js","App.js","Layout/Layout2.js","serviceWorker.js","index.js","App.module.css","components/Cards/Cards.module.css","constants/CardConstant.module.css","components/Chart/Chart.module.css","images/coronavirus.png"],"names":["CardConstant","props","categoryHeading","categoryTitle","categoryTodaysCount","todaysCount","categoryTotalCount","totalCount","Grid","item","className","styles","gridItem","xs","md","Typography","heading","component","id","start","end","duration","separator","style","fontSize","fontWeight","Cards","data","cases","deaths","recovered","updated","todayCases","todayDeaths","tests","active","updatedDate","Date","toTimeString","slice","container","updateHeading","heading1","heading2","spacing","justify","url_1","url_2","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","confirmed","total","date","reportDate","fetchCountries","countries","name","fetchCountriesData","response","res","timeline","Chart","data1","countryName","dates","useState","setDailyData","useEffect","fetchApi","globalLineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","countryLineChart","graph","bar","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCounries","setFetchedCountries","fetch","Paper","elevation","FormControl","NativeSelect","defaultValue","onChange","e","target","value","autoFocus","option","index","key","Layout","state","countryDates","activeCase","recoveredCases","fetchedData","setState","countryData","Object","keys","values","this","src","coronaImage","image","alt","links","href","React","Component","IndiaTrackerCards","IndiaTracker","App","path","Layout1","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.8df05cac.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\n\r\nimport styles from \"./CardConstant.module.css\";\r\nimport \"./Global.css\";\r\n\r\nconst CardConstant = (props) => {\r\n  const {\r\n    categoryHeading,\r\n    categoryTitle,\r\n    categoryTodaysCount,\r\n    todaysCount,\r\n    categoryTotalCount,\r\n    totalCount,\r\n  } = props;\r\n\r\n  return (\r\n    <Grid item className={styles.gridItem} xs={4} md={3}>\r\n      <Typography\r\n        className={styles.heading}\r\n        component={\"span\"}\r\n        id={categoryHeading}\r\n      >\r\n        {categoryTitle}\r\n      </Typography>\r\n\r\n      <Typography className={styles.todaysCount} id={categoryTodaysCount}>\r\n        [+\r\n        <CountUp start={0} end={todaysCount} duration={2} separator=\",\" />]\r\n      </Typography>\r\n      <Typography className={styles.totalCount} id={categoryTotalCount}>\r\n        <span style={{ fontSize: \"22px\", fontWeight: \"bold\" }}>\r\n          <CountUp start={0} end={totalCount} duration={2} separator=\",\" />\r\n        </span>\r\n      </Typography>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CardConstant;\r\n","import React from \"react\";\r\nimport styles from \"./Cards.module.css\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nimport CardConstant from \"../../constants/CardConstant\";\r\n\r\nconst Cards = (props) => {\r\n  const {\r\n    data: {\r\n      cases,\r\n      deaths,\r\n      recovered,\r\n      updated,\r\n      todayCases,\r\n      todayDeaths,\r\n      tests,\r\n      active,\r\n    },\r\n  } = props;\r\n\r\n  let updatedDate = new Date(updated).toTimeString();\r\n  updatedDate = updatedDate.slice(0, 8);\r\n\r\n  if (!cases) {\r\n    return \"Loading...\";\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.updateHeading}>\r\n        <p className={styles.heading1}>LAST UPDATED</p>\r\n        <p className={styles.heading2}>{updatedDate} IST</p>\r\n      </div>\r\n      <Grid container spacing={2} justify=\"center\">\r\n        <CardConstant\r\n          categoryHeading=\"confirmedheading\"\r\n          categoryTitle=\"CONFIRMED\"\r\n          categoryTodaysCount=\"confirmedTodaysCount\"\r\n          todaysCount={todayCases}\r\n          categoryTotalCount=\"confirmedTotalCount\"\r\n          totalCount={cases}\r\n        />\r\n\r\n        <CardConstant\r\n          categoryHeading=\"activeheading\"\r\n          categoryTitle=\"ACTIVE\"\r\n          categoryTodaysCount=\"activeTodaysCount\"\r\n          todaysCount={0}\r\n          categoryTotalCount=\"activeTotalCount\"\r\n          totalCount={active}\r\n        />\r\n\r\n        <CardConstant\r\n          categoryHeading=\"recoveredheading\"\r\n          categoryTitle=\"RECOVERED\"\r\n          categoryTodaysCount=\"recoveredTodaysCount\"\r\n          todaysCount={0}\r\n          categoryTotalCount=\"recoveredTotalCount\"\r\n          totalCount={recovered}\r\n        />\r\n        <CardConstant\r\n          categoryHeading=\"testheading\"\r\n          categoryTitle=\"TESTS\"\r\n          categoryTodaysCount=\"testTodaysCount\"\r\n          todaysCount={0}\r\n          categoryTotalCount=\"testTotalCount\"\r\n          totalCount={tests}\r\n        />\r\n\r\n        <CardConstant\r\n          categoryHeading=\"deathsheading\"\r\n          categoryTitle=\"DECEASED\"\r\n          categoryTodaysCount=\"deathsTodaysCount\"\r\n          todaysCount={todayDeaths}\r\n          categoryTotalCount=\"deathsTotalCount\"\r\n          totalCount={deaths}\r\n        />\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url_1 = \"https://corona.lmao.ninja/v2\";\r\nconst url_2 = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url_1;\r\n  if (country) {\r\n    changeableUrl = `${url_1}/countries/${country}`;\r\n  } else {\r\n    changeableUrl = `${url_1}/all`;\r\n  }\r\n\r\n  try {\r\n    const {\r\n      data: {\r\n        cases,\r\n        todayCases,\r\n        deaths,\r\n        todayDeaths,\r\n        recovered,\r\n        updated,\r\n        tests,\r\n        active,\r\n      },\r\n    } = await axios.get(changeableUrl);\r\n    return {\r\n      cases,\r\n      todayCases,\r\n      deaths,\r\n      todayDeaths,\r\n      recovered,\r\n      updated,\r\n      tests,\r\n      active,\r\n    };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url_2}/daily`);\r\n\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url_2}/countries`);\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountriesData = async (country) => {\r\n  let changeableUrl = url_1;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url_1}/historical/${country}`;\r\n  } else {\r\n    changeableUrl = `${url_1}/historical/`;\r\n  }\r\n\r\n  try {\r\n    const response = await axios.get(changeableUrl);\r\n\r\n    const res = response.data.timeline;\r\n    return res;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n// export const fetchIndianData = async () => {\r\n//   try {\r\n//     const response = await axios.get(\r\n//       \"https://api.covid19india.org/state_district_wise.json\"\r\n//     );\r\n//     console.log(response.data);\r\n//     const state = await Object.keys(response.data);\r\n//     await console.log(state);\r\n//     const district = await Object.keys(response.data.Kerala.districtData);\r\n//     await console.log(district);\r\n//     await console.log(response.data.Kerala.districtData.Thirssur);\r\n//   } catch (error) {\r\n//     console.log(error);\r\n//   }\r\n// };\r\n\r\n// fetchIndianData();\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./Chart.module.css\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport { fetchDailyData } from \"../../api\";\r\nimport { ResponsiveLine } from \"@nivo/line\";\r\n\r\nconst Chart = (props) => {\r\n  const { data1, countryName, dates, cases, deaths, recovered } = props;\r\n\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n\r\n    fetchApi();\r\n  }, []);\r\n\r\n  let globalLineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255,0,0,0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  let countryLineChart = cases ? (\r\n    <Line\r\n      data={{\r\n        labels: dates,\r\n        datasets: [\r\n          {\r\n            data: cases,\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            backgroundColor: \"rgba(0,0,255,0.2)\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: recovered,\r\n            label: \"Recovered\",\r\n            borderColor: \"#3aff33\",\r\n            backgroundColor: \"rgba(0,255,0, 0.2)\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: deaths,\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255,0,0,0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  let barGraph = data1.cases ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255,0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255,0,0, 0.5)\",\r\n            ],\r\n            data: [data1.cases, data1.recovered, data1.deaths],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${countryName}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  let graph = globalLineChart;\r\n  const bar = barGraph;\r\n\r\n  if (countryName) {\r\n    graph = countryLineChart;\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.graph}>{graph}</div>\r\n\r\n      <div className={styles.bar}>{bar}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n// \"homepage\": \"http://Sajjad21990.github.io/Covid-19-Live-Tracker-App-using-Reactjs\",\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { NativeSelect, FormControl, Paper } from \"@material-ui/core\";\r\nimport styles from \"./CountryPicker.module.css\";\r\n\r\nimport { fetchCountries } from \"../../api\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [fetchedCounries, setFetchedCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    };\r\n\r\n    fetch();\r\n  }, [setFetchedCountries]);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Paper elevation={3}>\r\n        <FormControl>\r\n          <NativeSelect\r\n            defaultValue=\"\"\r\n            onChange={(e) => handleCountryChange(e.target.value)}\r\n            autoFocus\r\n            id=\"native-select\"\r\n            styles={styles.option}\r\n          >\r\n            <option value=\"\">Global</option>\r\n            <option value=\"USA\">Usa</option>\r\n            <option value=\"India\">India</option>\r\n            {fetchedCounries.map((country, index) => (\r\n              <option key={index} value={country}>\r\n                {country}\r\n              </option>\r\n            ))}\r\n          </NativeSelect>\r\n        </FormControl>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React from \"react\";\r\n\r\nimport { Cards, Chart, CountryPicker } from \"../components\";\r\nimport styles from \"../App.module.css\";\r\nimport { fetchData, fetchCountriesData } from \"../api\";\r\n\r\nimport coronaImage from \"../images/coronavirus.png\";\r\nimport { Paper, Typography } from \"@material-ui/core\";\r\n\r\nclass Layout extends React.Component {\r\n  state = {\r\n    data: {},\r\n    country: \"\",\r\n    countryDates: [],\r\n    activeCase: [],\r\n    deaths: [],\r\n    recoveredCases: [],\r\n  };\r\n\r\n  async componentDidMount() {\r\n    const fetchedData = await fetchData();\r\n    this.setState({ data: fetchedData });\r\n  }\r\n\r\n  handleCountryChange = async (country) => {\r\n    const fetchedData = await fetchData(country);\r\n\r\n    await this.setState({ data: fetchedData, country: country });\r\n\r\n    const countryData = await fetchCountriesData(country);\r\n\r\n    const dates = Object.keys(countryData.cases);\r\n    const cases = Object.values(countryData.cases);\r\n    const deaths = Object.values(countryData.deaths);\r\n    const recovered = Object.values(countryData.recovered);\r\n\r\n    this.setState({\r\n      activeCase: cases,\r\n      deaths: deaths,\r\n      recoveredCases: recovered,\r\n      countryDates: dates,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <img src={coronaImage} className={styles.image} alt=\"COVID-19\" />\r\n\r\n        <Cards data={this.state.data} />\r\n        <CountryPicker\r\n          handleCountryChange={this.handleCountryChange}\r\n          data={this.state.data}\r\n          country={this.state.country}\r\n        />\r\n        <Chart\r\n          data1={this.state.data}\r\n          countryName={this.state.country}\r\n          dates={this.state.countryDates}\r\n          cases={this.state.activeCase}\r\n          deaths={this.state.deaths}\r\n          recovered={this.state.recoveredCases}\r\n        />\r\n\r\n        <Paper elevation={3}>\r\n          <Typography className={styles.links}>\r\n            Source Details:{\" \"}\r\n            <a href=\"https://corona.lmao.ninja/docs/\" target=\"_blank\">\r\n              Api 1,\r\n            </a>\r\n            <a href=\" https://covid19.mathdro.id/api\" target=\"_blank\">\r\n              Api 2\r\n            </a>\r\n          </Typography>\r\n        </Paper>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Layout;\r\n","import React from \"react\";\r\nimport CardConstant from \"../../../constants/CardConstant\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nconst IndiaTrackerCards = (props) => {\r\n  return (\r\n    <Grid container spacing={2} justify=\"center\">\r\n      <CardConstant\r\n        categoryHeading=\"confirmedheading\"\r\n        categoryTitle=\"CONFIRMED\"\r\n        categoryTodaysCount=\"confirmedTodaysCount\"\r\n        todaysCount={123}\r\n        categoryTotalCount=\"confirmedTotalCount\"\r\n        totalCount={12323}\r\n      />\r\n\r\n      <CardConstant\r\n        categoryHeading=\"activeheading\"\r\n        categoryTitle=\"ACTIVE\"\r\n        categoryTodaysCount=\"activeTodaysCount\"\r\n        todaysCount={0}\r\n        categoryTotalCount=\"activeTotalCount\"\r\n        totalCount={2131}\r\n      />\r\n\r\n      <CardConstant\r\n        categoryHeading=\"recoveredheading\"\r\n        categoryTitle=\"RECOVERED\"\r\n        categoryTodaysCount=\"recoveredTodaysCount\"\r\n        todaysCount={0}\r\n        categoryTotalCount=\"recoveredTotalCount\"\r\n        totalCount={21}\r\n      />\r\n      <CardConstant\r\n        categoryHeading=\"testheading\"\r\n        categoryTitle=\"TESTS\"\r\n        categoryTodaysCount=\"testTodaysCount\"\r\n        todaysCount={0}\r\n        categoryTotalCount=\"testTotalCount\"\r\n        totalCount={3112}\r\n      />\r\n\r\n      <CardConstant\r\n        categoryHeading=\"deathsheading\"\r\n        categoryTitle=\"DECEASED\"\r\n        categoryTodaysCount=\"deathsTodaysCount\"\r\n        todaysCount={21}\r\n        categoryTotalCount=\"deathsTotalCount\"\r\n        totalCount={12}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default IndiaTrackerCards;\r\n","import React from \"react\";\r\nimport IndiaTrackerCards from \"./IndiaTrackerCards/IndiaTrackerCards\";\r\n\r\nconst IndiaTracker = (props) => {\r\n  return (\r\n    <div>\r\n      <h1>India Covid-19 Tracker</h1>\r\n      <IndiaTrackerCards />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IndiaTracker;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Layout1 from \"./Layout/Layout1\";\nimport Layout2 from \"./Layout/Layout2\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route path=\"/\">\n            <Layout1 />\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\r\nimport IndiaTracker from \"../components/IndiaTracker/IndiaTracker\";\r\n// import TableComponent from \"../components/IndiaTracker/IndiaTrackerTable/TableComponent\";\r\nimport styles from \"../App.module.css\";\r\n// import { fetchIndianData } from \"../api\";\r\nimport { VictoryBar, VictoryChart, VictoryTheme, VictoryLine } from \"victory\";\r\n\r\nexport default class Layout2 extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className={styles.container}>\r\n        <div>\r\n          <IndiaTracker />\r\n        </div>\r\n        <div>\r\n          <VictoryChart theme={VictoryTheme.material} domainPadding={10}>\r\n            <VictoryBar\r\n              style={{ data: { fill: \"#c43a31\" } }}\r\n              animate={{\r\n                duration: 2000,\r\n                onLoad: { duration: 1000 },\r\n              }}\r\n            />\r\n          </VictoryChart>\r\n          <VictoryChart>\r\n            <VictoryLine\r\n              style={{\r\n                data: { stroke: \"#c43a31\" },\r\n                parent: { border: \"1px solid #ccc\" },\r\n              }}\r\n              data={[\r\n                { x: 1, y: 2 },\r\n                { x: 2, y: 3 },\r\n              ]}\r\n              animate={{\r\n                duration: 2000,\r\n                onLoad: { duration: 1000 },\r\n              }}\r\n            />\r\n          </VictoryChart>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2UDSr\",\"image\":\"App_image__1Bz_5\",\"links\":\"App_links__22_ba\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2bEGM\",\"updateHeading\":\"Cards_updateHeading__bhbzB\",\"heading1\":\"Cards_heading1__3aoma\",\"heading2\":\"Cards_heading2__2dDxA\",\"gridItem\":\"Cards_gridItem__1yJhX\",\"heading\":\"Cards_heading__2mCSm\",\"todaysCount\":\"Cards_todaysCount__2oETt\",\"totalCount\":\"Cards_totalCount__2HzDf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gridItem\":\"CardConstant_gridItem__1rL3H\",\"heading\":\"CardConstant_heading__hbhB8\",\"todaysCount\":\"CardConstant_todaysCount__lk-UH\",\"totalCount\":\"CardConstant_totalCount__2JUzP\",\"confirmedheading\":\"CardConstant_confirmedheading__2yJkZ\",\"activeheading\":\"CardConstant_activeheading__3ZSpM\",\"recoveredheading\":\"CardConstant_recoveredheading__3omCz\",\"testheading\":\"CardConstant_testheading__2_Ia7\",\"deathsheading\":\"CardConstant_deathsheading__1duMc\",\"confirmedTodaysCount\":\"CardConstant_confirmedTodaysCount__-hOTN\",\"testTodaysCount\":\"CardConstant_testTodaysCount__3iDqc\",\"recoveredTodaysCount\":\"CardConstant_recoveredTodaysCount__geeRi\",\"deathsTodaysCount\":\"CardConstant_deathsTodaysCount__3j_83\",\"confirmedTotalCount\":\"CardConstant_confirmedTotalCount__2vH_W\",\"activeTotalCount\":\"CardConstant_activeTotalCount__3sEgn\",\"recoveredTotalCount\":\"CardConstant_recoveredTotalCount__2EA2F\",\"testTotalCount\":\"CardConstant_testTotalCount__2cvML\",\"deathsTotalCount\":\"CardConstant_deathsTotalCount__351cO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1x45o\",\"bar\":\"Chart_bar__nrpQS\",\"chart\":\"Chart_chart__1c9jI\"};","module.exports = __webpack_public_path__ + \"static/media/coronavirus.34967c3b.png\";"],"sourceRoot":""}