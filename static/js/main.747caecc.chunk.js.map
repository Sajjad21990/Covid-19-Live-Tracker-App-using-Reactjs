{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.js","api/index.js","components/Chart/Chart.js","components/CountryPicker/CountryPicker.js","App.js","serviceWorker.js","index.js","components/Chart/Chart.module.css","App.module.css"],"names":["module","exports","Cards","props","data","cases","deaths","recovered","updated","updatedDate","Date","toDateString","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","url_1","url_2","fetchData","country","a","changeableUrl","axios","get","todayCases","todayDeaths","console","log","fetchDailyData","modifiedData","map","dailyData","confirmed","total","date","reportDate","fetchCountries","countries","name","fetchCountriesData","response","res","timeline","Chart","data1","countryName","dates","useState","setDailyData","useEffect","fetchApi","globalLineChart","length","labels","datasets","label","borderColor","fill","backgroundColor","countryLineChart","graph","bar","options","legend","display","title","text","CountryPicker","handleCountryChange","fetchedCounries","setFetchedCountries","fetch","Paper","elevation","FormControl","NativeSelect","defaultValue","onChange","e","target","value","autoFocus","id","option","index","key","App","state","countryDates","activeCase","recoveredCases","fetchedData","setState","countryData","Object","keys","values","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.747caecc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2bEGM\",\"card\":\"Cards_card__3TFZZ\",\"infected\":\"Cards_infected__3PGPf\",\"recovered\":\"Cards_recovered__17Dm4\",\"deaths\":\"Cards_deaths__jREbY\"};","import React from \"react\";\r\nimport styles from \"./Cards.module.css\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nconst Cards = (props) => {\r\n  const {\r\n    data: { cases, deaths, recovered, updated },\r\n  } = props;\r\n\r\n  const updatedDate = new Date(updated).toDateString();\r\n\r\n  if (!cases) {\r\n    return \"Loading...\";\r\n  }\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.infected)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              INFECTED\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp start={0} end={cases} duration={2} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">{updatedDate}</Typography>\r\n            <Typography variant=\"body2\">\r\n              NUMBER OF CONFIRMED CASES FROM COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.recovered)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              RECOVERED\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp start={0} end={recovered} duration={2} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">{updatedDate}</Typography>\r\n            <Typography variant=\"body2\">\r\n              NUMBER OF RECOVERIES FROM COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.deaths)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              DEATH\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp start={0} end={deaths} duration={2} separator=\",\" />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">{updatedDate}</Typography>\r\n            <Typography variant=\"body2\">\r\n              NUMBER OF DEATHS CAUSED BY COVID-19\r\n            </Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url_1 = \"https://corona.lmao.ninja\";\r\nconst url_2 = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchData = async (country) => {\r\n  let changeableUrl = url_1;\r\n  if (country) {\r\n    changeableUrl = `${url_1}/countries/${country}`;\r\n  } else {\r\n    changeableUrl = `${url_1}/all`;\r\n  }\r\n\r\n  try {\r\n    const {\r\n      data: { cases, todayCases, deaths, todayDeaths, recovered, updated },\r\n    } = await axios.get(changeableUrl);\r\n    return { cases, todayCases, deaths, todayDeaths, recovered, updated };\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchDailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url_2}/daily`);\r\n\r\n    const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths: dailyData.deaths.total,\r\n      date: dailyData.reportDate,\r\n    }));\r\n\r\n    return modifiedData;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountries = async () => {\r\n  try {\r\n    const {\r\n      data: { countries },\r\n    } = await axios.get(`${url_2}/countries`);\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nexport const fetchCountriesData = async (country) => {\r\n  let changeableUrl = url_1;\r\n\r\n  if (country) {\r\n    changeableUrl = `${url_1}/v2/historical/${country}`;\r\n  } else {\r\n    changeableUrl = `${url_1}/v2/historical/`;\r\n  }\r\n\r\n  try {\r\n    const response = await axios.get(changeableUrl);\r\n\r\n    const res = response.data.timeline;\r\n    return res;\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport styles from \"./Chart.module.css\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\nimport { fetchDailyData } from \"../../api\";\r\n\r\nconst Chart = (props) => {\r\n  const { data1, countryName, dates, cases, deaths, recovered } = props;\r\n\r\n  const [dailyData, setDailyData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchApi = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    };\r\n\r\n    fetchApi();\r\n  }, []);\r\n\r\n  let globalLineChart = dailyData.length ? (\r\n    <Line\r\n      data={{\r\n        labels: dailyData.map(({ date }) => date),\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255,0,0,0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  let countryLineChart = cases ? (\r\n    <Line\r\n      data={{\r\n        labels: dates,\r\n        datasets: [\r\n          {\r\n            data: cases,\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            backgroundColor: \"rgba(0,0,255,0.2)\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: recovered,\r\n            label: \"Recovered\",\r\n            borderColor: \"#3aff33\",\r\n            backgroundColor: \"rgba(0,255,0, 0.2)\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: deaths,\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(255,0,0,0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  let barGraph = data1.cases ? (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Infected\", \"Recovered\", \"Deaths\"],\r\n        datasets: [\r\n          {\r\n            label: \"People\",\r\n            backgroundColor: [\r\n              \"rgba(0, 0, 255,0.5)\",\r\n              \"rgba(0, 255, 0, 0.5)\",\r\n              \"rgba(255,0,0, 0.5)\",\r\n            ],\r\n            data: [data1.cases, data1.recovered, data1.deaths],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${countryName}` },\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  let graph = globalLineChart;\r\n  const bar = barGraph;\r\n\r\n  if (countryName) {\r\n    graph = countryLineChart;\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.graph}>{graph}</div>\r\n\r\n      <div className={styles.bar}>{bar}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  NativeSelect,\r\n  FormControl,\r\n  Paper,\r\n  InputLabel,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport styles from \"./CountryPicker.module.css\";\r\n\r\nimport { fetchCountries } from \"../../api\";\r\n\r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n  const [fetchedCounries, setFetchedCountries] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetch = async () => {\r\n      setFetchedCountries(await fetchCountries());\r\n    };\r\n\r\n    fetch();\r\n  }, [setFetchedCountries]);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <Paper elevation={3}>\r\n        <FormControl>\r\n          <NativeSelect\r\n            defaultValue=\"\"\r\n            onChange={(e) => handleCountryChange(e.target.value)}\r\n            autoFocus\r\n            id=\"native-select\"\r\n            styles={styles.option}\r\n          >\r\n            <option value=\"\">Global</option>\r\n            <option value=\"USA\">USA</option>\r\n            <option value=\"India\">India</option>\r\n            {fetchedCounries.map((country, index) => (\r\n              <option key={index} value={country}>\r\n                {country}\r\n              </option>\r\n            ))}\r\n          </NativeSelect>\r\n        </FormControl>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CountryPicker;\r\n","import React from \"react\";\n\nimport { Cards, Chart, CountryPicker } from \"./components\";\nimport styles from \"./App.module.css\";\nimport { fetchData, fetchCountriesData } from \"./api\";\n\nclass App extends React.Component {\n  state = {\n    data: {},\n    country: \"\",\n    countryDates: [],\n    activeCase: [],\n    deaths: [],\n    recoveredCases: [],\n  };\n\n  async componentDidMount() {\n    const fetchedData = await fetchData();\n    this.setState({ data: fetchedData });\n  }\n\n  handleCountryChange = async (country) => {\n    const fetchedData = await fetchData(country);\n    await this.setState({ data: fetchedData, country: country });\n\n    const countryData = await fetchCountriesData(country);\n\n    const dates = Object.keys(countryData.cases);\n    const cases = Object.values(countryData.cases);\n    const deaths = Object.values(countryData.deaths);\n    const recovered = Object.values(countryData.recovered);\n\n    this.setState({\n      activeCase: cases,\n      deaths: deaths,\n      recoveredCases: recovered,\n      countryDates: dates,\n    });\n  };\n\n  render() {\n    return (\n      <div className={styles.container}>\n        <Cards data={this.state.data} />\n        <CountryPicker\n          handleCountryChange={this.handleCountryChange}\n          data={this.state.data}\n          country={this.state.country}\n        />\n        <Chart\n          data1={this.state.data}\n          countryName={this.state.country}\n          dates={this.state.countryDates}\n          cases={this.state.activeCase}\n          deaths={this.state.deaths}\n          recovered={this.state.recoveredCases}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1x45o\",\"bar\":\"Chart_bar__nrpQS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2UDSr\"};"],"sourceRoot":""}